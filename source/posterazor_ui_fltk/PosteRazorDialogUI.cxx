/*
	PosteRazor - Make your own poster!
	Copyright (C) 2005-2006 by Alessandro Portale
	http://posterazor.sourceforge.net/

	This file is part of PosteRazor

	PosteRazor is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
	
	PosteRazor is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with PosteRazor; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
*/
// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "PosteRazorDialogUI.h"

void PosteRazorDialogUI::cb_m_settingsButton_i(Fl_Image_Text_Button*, void*) {
  OpenSettingsDialog();
}
void PosteRazorDialogUI::cb_m_settingsButton(Fl_Image_Text_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()))->cb_m_settingsButton_i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_settingsIcon[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,140,140,140,255,1,198,5,255,1,198,5,255,1,198,5,255,1,198,5,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,255,255,0,0,255,
255,0,0,255,255,0,0,255,140,140,140,255,0,0,0,0,140,140,140,255,140,140,140,255,
140,140,140,255,140,140,140,255,0,0,0,0,140,140,140,255,140,140,140,255,140,140,
140,255,0,0,0,0,0,0,0,0,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,1,198,5,
255,1,198,5,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,255,140,140,140,255,
46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,140,140,140,255,66,66,66,
255,66,66,66,255,140,140,140,255,0,0,0,0,0,0,0,0,140,140,140,255,60,60,255,255,
172,172,255,255,60,60,255,255,172,172,255,255,60,60,255,255,255,0,0,255,255,0,0,
255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,255,1,198,5,255,
1,198,5,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,255,46,46,46,255,46,
46,46,255,46,46,46,255,46,46,46,255,140,140,140,255,140,140,140,255,66,66,66,
255,140,140,140,255,0,0,0,0,140,140,140,255,140,140,140,255,140,140,140,255,172,
172,255,255,60,60,255,255,172,172,255,255,60,60,255,255,172,172,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,140,140,140,255,1,198,5,255,1,198,5,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,
255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,140,140,140,255,0,0,0,0,
140,140,140,255,66,66,66,255,66,66,66,255,140,140,140,255,66,66,66,255,140,140,
140,255,140,140,140,255,60,60,255,255,172,172,255,255,60,60,255,255,172,172,255,
255,60,60,255,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,
255,0,0,255,140,140,140,255,1,198,5,255,1,198,5,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,0,0,255,255,0,0,255,140,140,140,255,46,
46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,140,
140,140,255,66,66,66,255,66,66,66,255,66,66,66,255,66,66,66,255,66,66,66,255,
140,140,140,255,140,140,140,255,172,172,255,255,60,60,255,255,172,172,255,255,
60,60,255,255,172,172,255,255,255,255,255,255,255,255,255,255,140,140,140,255,
140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,
140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,
140,140,140,255,140,140,140,255,255,0,0,255,140,140,140,255,46,46,46,255,46,46,
46,255,140,140,140,255,46,46,46,255,140,140,140,255,66,66,66,255,66,66,66,255,
66,66,66,255,140,140,140,255,140,140,140,255,140,140,140,255,0,0,0,0,140,140,
140,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,
255,0,0,255,140,140,140,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,
46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,
46,46,46,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,
140,140,140,255,0,0,0,0,140,140,140,255,66,66,66,255,66,66,66,255,66,66,66,255,
140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,140,140,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,140,140,140,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,
255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,255,46,46,46,
255,46,46,46,255,140,140,140,255,0,0,0,0,0,0,0,0,140,140,140,255,140,140,140,
255,140,140,140,255,66,66,66,255,66,66,66,255,66,66,66,255,140,140,140,255,46,
46,46,255,140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,140,140,140,255,255,0,0,255,
255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,
140,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,
255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,255,0,0,
0,0,140,140,140,255,66,66,66,255,66,66,66,255,66,66,66,255,66,66,66,255,66,66,
66,255,140,140,140,255,46,46,46,255,46,46,46,255,46,46,46,255,140,140,140,255,
0,0,0,0,0,0,0,0,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,
255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,
255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,
0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,255,0,0,255,140,140,140,255,0,0,0,
0,140,140,140,255,66,66,66,255,140,140,140,255,66,66,66,255,66,66,66,255,140,
140,140,255,0,0,0,0,140,140,140,255,46,46,46,255,46,46,46,255,46,46,46,255,140,
140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,140,140,140,255,252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,255,
252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,
255,252,255,0,255,140,140,140,255,0,0,0,0,140,140,140,255,140,140,140,255,0,0,0,
0,140,140,140,255,66,66,66,255,140,140,140,255,0,0,0,0,0,0,0,0,140,140,140,
255,46,46,46,255,140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,140,140,255,252,255,0,255,252,255,0,255,
252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,255,252,255,0,
255,252,255,0,255,252,255,0,255,252,255,0,255,140,140,140,255,0,0,0,0,0,0,0,0,0,
0,0,0,140,140,140,255,66,66,66,255,66,66,66,255,140,140,140,255,0,0,0,0,0,0,0,
0,0,0,0,0,140,140,140,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,140,255,140,140,
140,255,0,0,0,0,0,0,0,0,0,0,0,0,140,140,140,255,140,140,140,255,140,140,140,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_settingsIcon(idata_settingsIcon, 35, 14, 4, 0);

void PosteRazorDialogUI::cb_m_prevButton_i(Fl_Button*, void*) {
  prev();
}
void PosteRazorDialogUI::cb_m_prevButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()))->cb_m_prevButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_nextButton_i(Fl_Button*, void*) {
  next();
}
void PosteRazorDialogUI::cb_m_nextButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()))->cb_m_nextButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_imageLoadButton_i(Fl_Button*, void*) {
  LoadInputImage(0);
}
void PosteRazorDialogUI::cb_m_imageLoadButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_imageLoadButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperFormatTypeTabs_i(Fl_Tabs*, void*) {
  HandlePaperSizeChangement(m_paperFormatTypeTabs);
}
void PosteRazorDialogUI::cb_m_paperFormatTypeTabs(Fl_Tabs* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()))->cb_m_paperFormatTypeTabs_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperOrientationPortraitRadioButton_i(Fl_Round_Button*, void*) {
  HandlePaperSizeChangement(m_paperOrientationPortraitRadioButton);
}
void PosteRazorDialogUI::cb_m_paperOrientationPortraitRadioButton(Fl_Round_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()->parent()))->cb_m_paperOrientationPortraitRadioButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperOrientationLandscapeRadioButton_i(Fl_Round_Button*, void*) {
  HandlePaperSizeChangement(m_paperOrientationLandscapeRadioButton);
}
void PosteRazorDialogUI::cb_m_paperOrientationLandscapeRadioButton(Fl_Round_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()->parent()))->cb_m_paperOrientationLandscapeRadioButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperCustomWidthInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperCustomWidthInput);
}
void PosteRazorDialogUI::cb_m_paperCustomWidthInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_paperCustomWidthInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperCustomHeightInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperCustomHeightInput);
}
void PosteRazorDialogUI::cb_m_paperCustomHeightInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_paperCustomHeightInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperBorderTopInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperBorderTopInput);
}
void PosteRazorDialogUI::cb_m_paperBorderTopInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_paperBorderTopInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperBorderRightInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperBorderRightInput);
}
void PosteRazorDialogUI::cb_m_paperBorderRightInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_paperBorderRightInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperBorderBottomInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperBorderBottomInput);
}
void PosteRazorDialogUI::cb_m_paperBorderBottomInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_paperBorderBottomInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_paperBorderLeftInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandlePaperSizeChangement(m_paperBorderLeftInput);
}
void PosteRazorDialogUI::cb_m_paperBorderLeftInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_paperBorderLeftInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_overlappingWidthInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandleOverlappingChangement(m_overlappingWidthInput);
}
void PosteRazorDialogUI::cb_m_overlappingWidthInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingWidthInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_overlappingHeightInput_i(Fl_PosteRazor_Spinner*, void*) {
  HandleOverlappingChangement(m_overlappingHeightInput);
}
void PosteRazorDialogUI::cb_m_overlappingHeightInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingHeightInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_overlappingPositionTopLeftButton_i(Fl_Button*, void*) {
  HandleOverlappingChangement(m_overlappingPositionTopLeftButton);
}
void PosteRazorDialogUI::cb_m_overlappingPositionTopLeftButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingPositionTopLeftButton_i(o,v);
}

static unsigned char idata_overlappingTopLeft[] =
{132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132};
static Fl_RGB_Image image_overlappingTopLeft(idata_overlappingTopLeft, 24, 26, 3, 0);

void PosteRazorDialogUI::cb_m_overlappingPositionTopRightButton_i(Fl_Button*, void*) {
  HandleOverlappingChangement(m_overlappingPositionTopRightButton);
}
void PosteRazorDialogUI::cb_m_overlappingPositionTopRightButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingPositionTopRightButton_i(o,v);
}

static unsigned char idata_overlappingTopRight[] =
{132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132};
static Fl_RGB_Image image_overlappingTopRight(idata_overlappingTopRight, 24, 26, 3, 0);

void PosteRazorDialogUI::cb_m_overlappingPositionBottomLeftButton_i(Fl_Button*, void*) {
  HandleOverlappingChangement(m_overlappingPositionBottomLeftButton);
}
void PosteRazorDialogUI::cb_m_overlappingPositionBottomLeftButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingPositionBottomLeftButton_i(o,v);
}

static unsigned char idata_overlappingBottomLeft[] =
{132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132};
static Fl_RGB_Image image_overlappingBottomLeft(idata_overlappingBottomLeft, 24, 26, 3, 0);

void PosteRazorDialogUI::cb_m_overlappingPositionBottomRightButton_i(Fl_Button*, void*) {
  HandleOverlappingChangement(m_overlappingPositionBottomRightButton);
}
void PosteRazorDialogUI::cb_m_overlappingPositionBottomRightButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_overlappingPositionBottomRightButton_i(o,v);
}

static unsigned char idata_overlappingBottomRight[] =
{132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,228,228,230,228,
228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,228,230,228,228,230,
228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,230,228,228,
230,228,228,230,228,228,230,228,228,230,228,228,230,228,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,252,130,132,252,130,
132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,
130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,252,130,132,
252,130,132,252,130,132,252,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,
132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,
132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,130,132,132,
130,132,132,130,132,132,130,132,132,130,132,132,130,132};
static Fl_RGB_Image image_overlappingBottomRight(idata_overlappingBottomRight, 24, 26, 3, 0);

void PosteRazorDialogUI::cb_m_posterSizeAbsoluteRadioButton_i(Fl_Round_Button*, void*) {
  UpdatePosterSizeGroupsState();
}
void PosteRazorDialogUI::cb_m_posterSizeAbsoluteRadioButton(Fl_Round_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_posterSizeAbsoluteRadioButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterAbsoluteWidthInput_i(Fl_PosteRazor_Spinner*, void*) {
  UpdatePosterSizeFields(m_posterAbsoluteWidthInput);
}
void PosteRazorDialogUI::cb_m_posterAbsoluteWidthInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAbsoluteWidthInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterAbsoluteHeightInput_i(Fl_PosteRazor_Spinner*, void*) {
  UpdatePosterSizeFields(m_posterAbsoluteHeightInput);
}
void PosteRazorDialogUI::cb_m_posterAbsoluteHeightInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAbsoluteHeightInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterSizeInPagesRadioButton_i(Fl_Round_Button*, void*) {
  UpdatePosterSizeGroupsState();
}
void PosteRazorDialogUI::cb_m_posterSizeInPagesRadioButton(Fl_Round_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_posterSizeInPagesRadioButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterPagesWidthInput_i(Fl_PosteRazor_Spinner*, void*) {
  UpdatePosterSizeFields(m_posterPagesWidthInput);
}
void PosteRazorDialogUI::cb_m_posterPagesWidthInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterPagesWidthInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterPagesHeightInput_i(Fl_PosteRazor_Spinner*, void*) {
  UpdatePosterSizeFields(m_posterPagesHeightInput);
}
void PosteRazorDialogUI::cb_m_posterPagesHeightInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterPagesHeightInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterSizePercentualRadioButton_i(Fl_Round_Button*, void*) {
  UpdatePosterSizeGroupsState();
}
void PosteRazorDialogUI::cb_m_posterSizePercentualRadioButton(Fl_Round_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_posterSizePercentualRadioButton_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterPercentualSizeInput_i(Fl_PosteRazor_Spinner*, void*) {
  UpdatePosterSizeFields(m_posterPercentualSizeInput);
}
void PosteRazorDialogUI::cb_m_posterPercentualSizeInput(Fl_PosteRazor_Spinner* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterPercentualSizeInput_i(o,v);
}

void PosteRazorDialogUI::cb_m_posterAlignmentTopButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentTopButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentTopButton_i(o,v);
}

static unsigned char idata_alignmentTop[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,
255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,
0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,255,
128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,
0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,
255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,
255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,
0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,255,
128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,
0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,
128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,
128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentTop(idata_alignmentTop, 15, 19, 4, 0);

void PosteRazorDialogUI::cb_m_posterAlignmentMiddleButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentMiddleButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentMiddleButton_i(o,v);
}

static unsigned char idata_alignmentMiddle[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,
255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,
255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,
255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,
128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,0,0,0,
255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,
255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,
255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,
128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,
128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentMiddle(idata_alignmentMiddle, 15, 19, 4, 0);

void PosteRazorDialogUI::cb_m_posterAlignmentBottomButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentBottomButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentBottomButton_i(o,v);
}

static unsigned char idata_alignmentBottom[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,
255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,128,
128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,
128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,
128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,
0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,
255,128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,
128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,
128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,128,255,255,128,
128,255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentBottom(idata_alignmentBottom, 15, 19, 4, 0);

void PosteRazorDialogUI::cb_m_posterAlignmentLeftButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentLeftButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentLeftButton_i(o,v);
}

static unsigned char idata_alignmentLeft[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,
255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,255,255,128,
128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,255,255,128,
128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,255,255,128,
128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,255,255,128,
128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,
128,128,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentLeft(idata_alignmentLeft, 19, 15, 4, 0);

void PosteRazorDialogUI::cb_m_posterAlignmentCenterButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentCenterButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentCenterButton_i(o,v);
}

static unsigned char idata_alignmentCenter[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,
255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,
128,128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentCenter(idata_alignmentCenter, 19, 15, 4, 0);

void PosteRazorDialogUI::cb_m_posterAlignmentRightButton_i(Fl_Button*, void*) {
  HandlePosterImageAlignment();
}
void PosteRazorDialogUI::cb_m_posterAlignmentRightButton(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()->parent()))->cb_m_posterAlignmentRightButton_i(o,v);
}

static unsigned char idata_alignmentRight[] =
{128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,
128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,
255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,128,255,255,128,128,255,255,128,128,
255,0,0,0,255,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
128,128,255,255,128,128,255,255,128,128,255,0,0,0,255,0,0,0,0,128,128,128,255,
128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,128,128,128,255,
128,128,128,255,128,128,128,255};
static Fl_RGB_Image image_alignmentRight(idata_alignmentRight, 19, 15, 4, 0);

void PosteRazorDialogUI::cb_14filesave_i(Fl_Button*, void*) {
  SavePoster();
}
void PosteRazorDialogUI::cb_14filesave(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_14filesave_i(o,v);
}

void PosteRazorDialogUI::cb_m_setLaunchPDFApplicationCheckButton_i(Fl_Check_Button*, void*) {
  SetLaunchPDFApplication();
}
void PosteRazorDialogUI::cb_m_setLaunchPDFApplicationCheckButton(Fl_Check_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()->parent()->parent()))->cb_m_setLaunchPDFApplicationCheckButton_i(o,v);
}

void PosteRazorDialogUI::cb__i(Fl_Button*, void*) {
  OpenHelpDialog();
}
void PosteRazorDialogUI::cb_(Fl_Button* o, void* v) {
  ((PosteRazorDialogUI*)(o->parent()->parent()))->cb__i(o,v);
}
PosteRazorDialogUI::PosteRazorDialogUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _PosteRazorDialogUI();
}

PosteRazorDialogUI::PosteRazorDialogUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _PosteRazorDialogUI();
}

void PosteRazorDialogUI::_PosteRazorDialogUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->user_data((void*)(this));
this->align(FL_ALIGN_TOP);
this->when(FL_WHEN_RELEASE);
{ Fl_Group* o = new Fl_Group(10, 420, 600, 25);
  { Fl_Box* o = new Fl_Box(295, 420, 15, 25);
    Fl_Group::current()->resizable(o);
  } // Fl_Box* o
  { m_settingsButton = new Fl_Image_Text_Button(10, 420, 195, 25, "Settings...");
    m_settingsButton->box(FL_UP_BOX);
    m_settingsButton->color(FL_BACKGROUND_COLOR);
    m_settingsButton->selection_color(FL_BACKGROUND_COLOR);
    m_settingsButton->labeltype(FL_NORMAL_LABEL);
    m_settingsButton->labelfont(0);
    m_settingsButton->labelsize(14);
    m_settingsButton->labelcolor(FL_GRAY0);
    m_settingsButton->callback((Fl_Callback*)cb_m_settingsButton);
    m_settingsButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    m_settingsButton->when(FL_WHEN_RELEASE);
  } // Fl_Image_Text_Button* m_settingsButton
  { m_settingsButtonLabel = new Fl_Box(205, 420, 40, 25);
    m_settingsButtonLabel->image(image_settingsIcon);
    m_settingsButtonLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    m_settingsButtonLabel->hide();
  } // Fl_Box* m_settingsButtonLabel
  { m_prevButton = new Fl_Button(380, 420, 110, 25, "@-2<- Back");
    m_prevButton->labelcolor(FL_GRAY0);
    m_prevButton->callback((Fl_Callback*)cb_m_prevButton);
  } // Fl_Button* m_prevButton
  { m_nextButton = new Fl_Button(500, 420, 110, 25, "Next @-2->");
    m_nextButton->labelcolor(FL_GRAY0);
    m_nextButton->callback((Fl_Callback*)cb_m_nextButton);
  } // Fl_Button* m_nextButton
  o->end();
} // Fl_Group* o
{ m_wizard = new Fl_Wizard(315, 45, 295, 365);
  m_wizard->box(FL_THIN_DOWN_BOX);
  m_wizard->user_data((void*)(this));
  { m_loadInputImageStep = new Fl_Group(315, 45, 295, 365);
    m_loadInputImageStep->color(FL_LIGHT1);
    m_loadInputImageStep->hide();
    { m_imageLoadGroup = new Fl_Group(325, 69, 275, 25, "Input Image");
      { m_inputFileNameLabel = new Fl_Box(325, 69, 250, 25);
        m_inputFileNameLabel->box(FL_THIN_DOWN_BOX);
        m_inputFileNameLabel->color((Fl_Color)55);
        m_inputFileNameLabel->align(68|FL_ALIGN_INSIDE);
        Fl_Group::current()->resizable(m_inputFileNameLabel);
      } // Fl_Box* m_inputFileNameLabel
      { m_imageLoadButton = new Fl_Button(575, 69, 25, 25, "@+1fileopen");
        m_imageLoadButton->labelcolor((Fl_Color)134);
        m_imageLoadButton->callback((Fl_Callback*)cb_m_imageLoadButton);
      } // Fl_Button* m_imageLoadButton
      m_imageLoadGroup->end();
    } // Fl_Group* m_imageLoadGroup
    { m_imageInfoGroup = new Fl_Group(325, 120, 275, 85, "Image information");
      m_imageInfoGroup->box(FL_THIN_DOWN_BOX);
      m_imageInfoGroup->color(FL_DARK2);
      { m_imageInfoKeysLabel = new Fl_Box(325, 130, 135, 65);
        m_imageInfoKeysLabel->align(FL_ALIGN_TOP_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Box* m_imageInfoKeysLabel
      { m_imageInfoValuesLabel = new Fl_Box(460, 130, 135, 65);
        m_imageInfoValuesLabel->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* m_imageInfoValuesLabel
      m_imageInfoGroup->end();
    } // Fl_Group* m_imageInfoGroup
    { Fl_Box* o = new Fl_Box(315, 410, 295, 0);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    m_loadInputImageStep->end();
  } // Fl_Group* m_loadInputImageStep
  { m_paperSizeStep = new Fl_Group(315, 45, 295, 365);
    m_paperSizeStep->hide();
    { m_paperFormatTypeTabs = new Fl_Tabs(325, 70, 275, 140, "Paper size");
      m_paperFormatTypeTabs->callback((Fl_Callback*)cb_m_paperFormatTypeTabs);
      { m_paperFormatStandardGroup = new Fl_Group(325, 95, 275, 115, "Standard");
        m_paperFormatStandardGroup->box(FL_THIN_UP_BOX);
        m_paperFormatStandardGroup->selection_color((Fl_Color)40);
        m_paperFormatStandardGroup->hide();
        { m_paperFormatChoice = new Fl_Choice(425, 105, 165, 25, "Format:");
          m_paperFormatChoice->down_box(FL_BORDER_BOX);
        } // Fl_Choice* m_paperFormatChoice
        { m_paperOrientationGroup = new Fl_Group(425, 140, 165, 60, "Orientation:");
          m_paperOrientationGroup->box(FL_THIN_DOWN_BOX);
          m_paperOrientationGroup->color((Fl_Color)43);
          m_paperOrientationGroup->align(FL_ALIGN_LEFT);
          { m_paperOrientationPortraitRadioButton = new Fl_Round_Button(460, 145, 125, 25, "Portrait");
            m_paperOrientationPortraitRadioButton->type(102);
            m_paperOrientationPortraitRadioButton->down_box(FL_ROUND_DOWN_BOX);
            m_paperOrientationPortraitRadioButton->callback((Fl_Callback*)cb_m_paperOrientationPortraitRadioButton);
          } // Fl_Round_Button* m_paperOrientationPortraitRadioButton
          { m_paperOrientationLandscapeRadioButton = new Fl_Round_Button(460, 170, 125, 25, "Landscape");
            m_paperOrientationLandscapeRadioButton->type(102);
            m_paperOrientationLandscapeRadioButton->down_box(FL_ROUND_DOWN_BOX);
            m_paperOrientationLandscapeRadioButton->callback((Fl_Callback*)cb_m_paperOrientationLandscapeRadioButton);
          } // Fl_Round_Button* m_paperOrientationLandscapeRadioButton
          m_paperOrientationGroup->end();
        } // Fl_Group* m_paperOrientationGroup
        m_paperFormatStandardGroup->end();
      } // Fl_Group* m_paperFormatStandardGroup
      { m_paperFormatCustomGroup = new Fl_Group(325, 95, 275, 115, "Custom");
        m_paperFormatCustomGroup->box(FL_THIN_UP_BOX);
        m_paperFormatCustomGroup->selection_color((Fl_Color)40);
        { m_paperCustomWidthInput = new Fl_PosteRazor_Spinner(425, 122, 95, 25, "Width:");
          m_paperCustomWidthInput->box(FL_NO_BOX);
          m_paperCustomWidthInput->color(FL_BACKGROUND_COLOR);
          m_paperCustomWidthInput->selection_color(FL_BACKGROUND_COLOR);
          m_paperCustomWidthInput->labeltype(FL_NORMAL_LABEL);
          m_paperCustomWidthInput->labelfont(0);
          m_paperCustomWidthInput->labelsize(14);
          m_paperCustomWidthInput->labelcolor(FL_FOREGROUND_COLOR);
          m_paperCustomWidthInput->callback((Fl_Callback*)cb_m_paperCustomWidthInput);
          m_paperCustomWidthInput->align(FL_ALIGN_LEFT);
          m_paperCustomWidthInput->when(FL_WHEN_CHANGED);
          m_paperCustomWidthInput->end();
        } // Fl_PosteRazor_Spinner* m_paperCustomWidthInput
        { m_paperCustomWidthDimensionUnitLabel = new Fl_Box(520, 122, 75, 25, "cm");
          m_paperCustomWidthDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_paperCustomWidthDimensionUnitLabel
        { m_paperCustomHeightInput = new Fl_PosteRazor_Spinner(425, 157, 95, 25, "Height:");
          m_paperCustomHeightInput->box(FL_NO_BOX);
          m_paperCustomHeightInput->color(FL_BACKGROUND_COLOR);
          m_paperCustomHeightInput->selection_color(FL_BACKGROUND_COLOR);
          m_paperCustomHeightInput->labeltype(FL_NORMAL_LABEL);
          m_paperCustomHeightInput->labelfont(0);
          m_paperCustomHeightInput->labelsize(14);
          m_paperCustomHeightInput->labelcolor(FL_FOREGROUND_COLOR);
          m_paperCustomHeightInput->callback((Fl_Callback*)cb_m_paperCustomHeightInput);
          m_paperCustomHeightInput->align(FL_ALIGN_LEFT);
          m_paperCustomHeightInput->when(FL_WHEN_CHANGED);
          m_paperCustomHeightInput->end();
        } // Fl_PosteRazor_Spinner* m_paperCustomHeightInput
        { m_paperCustomHeightDimensionUnitLabel = new Fl_Box(520, 157, 75, 25, "cm");
          m_paperCustomHeightDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_paperCustomHeightDimensionUnitLabel
        m_paperFormatCustomGroup->end();
      } // Fl_Group* m_paperFormatCustomGroup
      m_paperFormatTypeTabs->end();
    } // Fl_Tabs* m_paperFormatTypeTabs
    { m_paperBordersGroup = new Fl_Group(325, 235, 275, 135, "Borders (cm)");
      m_paperBordersGroup->box(FL_THIN_DOWN_BOX);
      m_paperBordersGroup->color((Fl_Color)43);
      { m_paperBorderTopInput = new Fl_PosteRazor_Spinner(430, 260, 60, 25, "Top");
        m_paperBorderTopInput->box(FL_NO_BOX);
        m_paperBorderTopInput->color(FL_BACKGROUND_COLOR);
        m_paperBorderTopInput->selection_color(FL_BACKGROUND_COLOR);
        m_paperBorderTopInput->labeltype(FL_NORMAL_LABEL);
        m_paperBorderTopInput->labelfont(0);
        m_paperBorderTopInput->labelsize(14);
        m_paperBorderTopInput->labelcolor(FL_FOREGROUND_COLOR);
        m_paperBorderTopInput->callback((Fl_Callback*)cb_m_paperBorderTopInput);
        m_paperBorderTopInput->align(FL_ALIGN_TOP);
        m_paperBorderTopInput->when(FL_WHEN_CHANGED);
        m_paperBorderTopInput->end();
      } // Fl_PosteRazor_Spinner* m_paperBorderTopInput
      { m_paperBorderRightInput = new Fl_PosteRazor_Spinner(490, 290, 60, 25, "Right");
        m_paperBorderRightInput->box(FL_NO_BOX);
        m_paperBorderRightInput->color(FL_BACKGROUND_COLOR);
        m_paperBorderRightInput->selection_color(FL_BACKGROUND_COLOR);
        m_paperBorderRightInput->labeltype(FL_NORMAL_LABEL);
        m_paperBorderRightInput->labelfont(0);
        m_paperBorderRightInput->labelsize(14);
        m_paperBorderRightInput->labelcolor(FL_FOREGROUND_COLOR);
        m_paperBorderRightInput->callback((Fl_Callback*)cb_m_paperBorderRightInput);
        m_paperBorderRightInput->align(FL_ALIGN_TOP_RIGHT);
        m_paperBorderRightInput->when(FL_WHEN_CHANGED);
        m_paperBorderRightInput->end();
      } // Fl_PosteRazor_Spinner* m_paperBorderRightInput
      { m_paperBorderBottomInput = new Fl_PosteRazor_Spinner(430, 320, 60, 25, "Bottom");
        m_paperBorderBottomInput->box(FL_NO_BOX);
        m_paperBorderBottomInput->color(FL_BACKGROUND_COLOR);
        m_paperBorderBottomInput->selection_color(FL_BACKGROUND_COLOR);
        m_paperBorderBottomInput->labeltype(FL_NORMAL_LABEL);
        m_paperBorderBottomInput->labelfont(0);
        m_paperBorderBottomInput->labelsize(14);
        m_paperBorderBottomInput->labelcolor(FL_FOREGROUND_COLOR);
        m_paperBorderBottomInput->callback((Fl_Callback*)cb_m_paperBorderBottomInput);
        m_paperBorderBottomInput->align(FL_ALIGN_BOTTOM);
        m_paperBorderBottomInput->when(FL_WHEN_CHANGED);
        m_paperBorderBottomInput->end();
      } // Fl_PosteRazor_Spinner* m_paperBorderBottomInput
      { m_paperBorderLeftInput = new Fl_PosteRazor_Spinner(370, 290, 60, 25, "Left");
        m_paperBorderLeftInput->box(FL_NO_BOX);
        m_paperBorderLeftInput->color(FL_BACKGROUND_COLOR);
        m_paperBorderLeftInput->selection_color(FL_BACKGROUND_COLOR);
        m_paperBorderLeftInput->labeltype(FL_NORMAL_LABEL);
        m_paperBorderLeftInput->labelfont(0);
        m_paperBorderLeftInput->labelsize(14);
        m_paperBorderLeftInput->labelcolor(FL_FOREGROUND_COLOR);
        m_paperBorderLeftInput->callback((Fl_Callback*)cb_m_paperBorderLeftInput);
        m_paperBorderLeftInput->align(FL_ALIGN_TOP_LEFT);
        m_paperBorderLeftInput->when(FL_WHEN_CHANGED);
        m_paperBorderLeftInput->end();
      } // Fl_PosteRazor_Spinner* m_paperBorderLeftInput
      m_paperBordersGroup->end();
    } // Fl_Group* m_paperBordersGroup
    { Fl_Box* o = new Fl_Box(315, 400, 295, 10);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    m_paperSizeStep->end();
  } // Fl_Group* m_paperSizeStep
  { m_overlappingStep = new Fl_Group(315, 45, 295, 365);
    m_overlappingStep->hide();
    { m_overlappingSizeGroup = new Fl_Group(325, 70, 275, 75, "Overlapping size");
      m_overlappingSizeGroup->box(FL_THIN_DOWN_BOX);
      m_overlappingSizeGroup->color(FL_DARK2);
      m_overlappingSizeGroup->selection_color(FL_LIGHT3);
      { m_overlappingWidthInput = new Fl_PosteRazor_Spinner(430, 80, 90, 25, "Width:");
        m_overlappingWidthInput->box(FL_NO_BOX);
        m_overlappingWidthInput->color(FL_BACKGROUND_COLOR);
        m_overlappingWidthInput->selection_color(FL_BACKGROUND_COLOR);
        m_overlappingWidthInput->labeltype(FL_NORMAL_LABEL);
        m_overlappingWidthInput->labelfont(0);
        m_overlappingWidthInput->labelsize(14);
        m_overlappingWidthInput->labelcolor(FL_FOREGROUND_COLOR);
        m_overlappingWidthInput->callback((Fl_Callback*)cb_m_overlappingWidthInput);
        m_overlappingWidthInput->align(FL_ALIGN_LEFT);
        m_overlappingWidthInput->when(FL_WHEN_CHANGED);
        m_overlappingWidthInput->end();
      } // Fl_PosteRazor_Spinner* m_overlappingWidthInput
      { m_overlappingWidthDimensionUnitLabel = new Fl_Box(520, 80, 75, 25, "cm");
        m_overlappingWidthDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* m_overlappingWidthDimensionUnitLabel
      { m_overlappingHeightInput = new Fl_PosteRazor_Spinner(430, 110, 90, 25, "Height:");
        m_overlappingHeightInput->box(FL_NO_BOX);
        m_overlappingHeightInput->color(FL_BACKGROUND_COLOR);
        m_overlappingHeightInput->selection_color(FL_BACKGROUND_COLOR);
        m_overlappingHeightInput->labeltype(FL_NORMAL_LABEL);
        m_overlappingHeightInput->labelfont(0);
        m_overlappingHeightInput->labelsize(14);
        m_overlappingHeightInput->labelcolor(FL_FOREGROUND_COLOR);
        m_overlappingHeightInput->callback((Fl_Callback*)cb_m_overlappingHeightInput);
        m_overlappingHeightInput->align(FL_ALIGN_LEFT);
        m_overlappingHeightInput->when(FL_WHEN_CHANGED);
        m_overlappingHeightInput->end();
      } // Fl_PosteRazor_Spinner* m_overlappingHeightInput
      { m_overlappingHeightDimensionUnitLabel = new Fl_Box(520, 110, 75, 25, "cm");
        m_overlappingHeightDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* m_overlappingHeightDimensionUnitLabel
      m_overlappingSizeGroup->end();
    } // Fl_Group* m_overlappingSizeGroup
    { Fl_Box* o = new Fl_Box(315, 410, 290, 0);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    { m_overlappingPositionGroup = new Fl_Group(325, 170, 275, 190, "Overlapping position");
      m_overlappingPositionGroup->box(FL_THIN_DOWN_BOX);
      m_overlappingPositionGroup->color(FL_DARK2);
      m_overlappingPositionGroup->selection_color(FL_LIGHT3);
      { m_overlappingPositionTopLeftButton = new Fl_Button(335, 180, 120, 80, "Top left");
        m_overlappingPositionTopLeftButton->type(102);
        m_overlappingPositionTopLeftButton->color(FL_DARK1);
        m_overlappingPositionTopLeftButton->selection_color((Fl_Color)55);
        m_overlappingPositionTopLeftButton->image(image_overlappingTopLeft);
        m_overlappingPositionTopLeftButton->callback((Fl_Callback*)cb_m_overlappingPositionTopLeftButton);
      } // Fl_Button* m_overlappingPositionTopLeftButton
      { m_overlappingPositionTopRightButton = new Fl_Button(470, 180, 120, 80, "Top right");
        m_overlappingPositionTopRightButton->type(102);
        m_overlappingPositionTopRightButton->color(FL_DARK1);
        m_overlappingPositionTopRightButton->selection_color((Fl_Color)55);
        m_overlappingPositionTopRightButton->image(image_overlappingTopRight);
        m_overlappingPositionTopRightButton->callback((Fl_Callback*)cb_m_overlappingPositionTopRightButton);
      } // Fl_Button* m_overlappingPositionTopRightButton
      { m_overlappingPositionBottomLeftButton = new Fl_Button(335, 270, 120, 80, "Bottom left");
        m_overlappingPositionBottomLeftButton->type(102);
        m_overlappingPositionBottomLeftButton->color(FL_DARK1);
        m_overlappingPositionBottomLeftButton->selection_color((Fl_Color)55);
        m_overlappingPositionBottomLeftButton->image(image_overlappingBottomLeft);
        m_overlappingPositionBottomLeftButton->callback((Fl_Callback*)cb_m_overlappingPositionBottomLeftButton);
      } // Fl_Button* m_overlappingPositionBottomLeftButton
      { m_overlappingPositionBottomRightButton = new Fl_Button(470, 270, 120, 80, "Bottom right");
        m_overlappingPositionBottomRightButton->type(102);
        m_overlappingPositionBottomRightButton->color(FL_DARK1);
        m_overlappingPositionBottomRightButton->selection_color((Fl_Color)55);
        m_overlappingPositionBottomRightButton->image(image_overlappingBottomRight);
        m_overlappingPositionBottomRightButton->callback((Fl_Callback*)cb_m_overlappingPositionBottomRightButton);
      } // Fl_Button* m_overlappingPositionBottomRightButton
      m_overlappingPositionGroup->end();
    } // Fl_Group* m_overlappingPositionGroup
    m_overlappingStep->end();
  } // Fl_Group* m_overlappingStep
  { m_posterSizeStep = new Fl_Group(315, 45, 295, 365);
    { m_posterSizeGroup = new Fl_Group(325, 70, 275, 250, "Image size");
      m_posterSizeGroup->box(FL_THIN_DOWN_BOX);
      m_posterSizeGroup->color(FL_DARK2);
      m_posterSizeGroup->selection_color(FL_LIGHT3);
      { m_posterSizeAbsoluteRadioButton = new Fl_Round_Button(335, 80, 260, 20, "Absolute image size");
        m_posterSizeAbsoluteRadioButton->type(102);
        m_posterSizeAbsoluteRadioButton->down_box(FL_ROUND_DOWN_BOX);
        m_posterSizeAbsoluteRadioButton->callback((Fl_Callback*)cb_m_posterSizeAbsoluteRadioButton);
      } // Fl_Round_Button* m_posterSizeAbsoluteRadioButton
      { m_posterSizeAbsoluteGroup = new Fl_Group(335, 105, 260, 55);
        { m_posterAbsoluteWidthInput = new Fl_PosteRazor_Spinner(430, 105, 90, 25, "Width:");
          m_posterAbsoluteWidthInput->box(FL_NO_BOX);
          m_posterAbsoluteWidthInput->color(FL_BACKGROUND_COLOR);
          m_posterAbsoluteWidthInput->selection_color(FL_BACKGROUND_COLOR);
          m_posterAbsoluteWidthInput->labeltype(FL_NORMAL_LABEL);
          m_posterAbsoluteWidthInput->labelfont(0);
          m_posterAbsoluteWidthInput->labelsize(14);
          m_posterAbsoluteWidthInput->labelcolor(FL_FOREGROUND_COLOR);
          m_posterAbsoluteWidthInput->callback((Fl_Callback*)cb_m_posterAbsoluteWidthInput);
          m_posterAbsoluteWidthInput->align(FL_ALIGN_LEFT);
          m_posterAbsoluteWidthInput->when(FL_WHEN_CHANGED);
          m_posterAbsoluteWidthInput->end();
        } // Fl_PosteRazor_Spinner* m_posterAbsoluteWidthInput
        { m_posterAbsoluteWidthDimensionUnitLabel = new Fl_Box(520, 105, 70, 25, "cm");
          m_posterAbsoluteWidthDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_posterAbsoluteWidthDimensionUnitLabel
        { m_posterAbsoluteHeightInput = new Fl_PosteRazor_Spinner(430, 135, 90, 25, "Height:");
          m_posterAbsoluteHeightInput->box(FL_NO_BOX);
          m_posterAbsoluteHeightInput->color(FL_BACKGROUND_COLOR);
          m_posterAbsoluteHeightInput->selection_color(FL_BACKGROUND_COLOR);
          m_posterAbsoluteHeightInput->labeltype(FL_NORMAL_LABEL);
          m_posterAbsoluteHeightInput->labelfont(0);
          m_posterAbsoluteHeightInput->labelsize(14);
          m_posterAbsoluteHeightInput->labelcolor(FL_FOREGROUND_COLOR);
          m_posterAbsoluteHeightInput->callback((Fl_Callback*)cb_m_posterAbsoluteHeightInput);
          m_posterAbsoluteHeightInput->align(FL_ALIGN_LEFT);
          m_posterAbsoluteHeightInput->when(FL_WHEN_CHANGED);
          m_posterAbsoluteHeightInput->end();
        } // Fl_PosteRazor_Spinner* m_posterAbsoluteHeightInput
        { m_posterAbsoluteHeightDimensionUnitLabel = new Fl_Box(520, 135, 70, 25, "cm");
          m_posterAbsoluteHeightDimensionUnitLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_posterAbsoluteHeightDimensionUnitLabel
        m_posterSizeAbsoluteGroup->end();
      } // Fl_Group* m_posterSizeAbsoluteGroup
      { m_posterSizeInPagesRadioButton = new Fl_Round_Button(335, 170, 260, 20, "Size in pages");
        m_posterSizeInPagesRadioButton->type(102);
        m_posterSizeInPagesRadioButton->down_box(FL_ROUND_DOWN_BOX);
        m_posterSizeInPagesRadioButton->callback((Fl_Callback*)cb_m_posterSizeInPagesRadioButton);
      } // Fl_Round_Button* m_posterSizeInPagesRadioButton
      { m_posterSizeInPagesGroup = new Fl_Group(335, 195, 260, 55);
        { Fl_PosteRazor_Spinner* o = m_posterPagesWidthInput = new Fl_PosteRazor_Spinner(430, 195, 90, 25, "Width:");
          m_posterPagesWidthInput->box(FL_NO_BOX);
          m_posterPagesWidthInput->color(FL_BACKGROUND_COLOR);
          m_posterPagesWidthInput->selection_color(FL_BACKGROUND_COLOR);
          m_posterPagesWidthInput->labeltype(FL_NORMAL_LABEL);
          m_posterPagesWidthInput->labelfont(0);
          m_posterPagesWidthInput->labelsize(14);
          m_posterPagesWidthInput->labelcolor(FL_FOREGROUND_COLOR);
          m_posterPagesWidthInput->callback((Fl_Callback*)cb_m_posterPagesWidthInput);
          m_posterPagesWidthInput->align(FL_ALIGN_LEFT);
          m_posterPagesWidthInput->when(FL_WHEN_CHANGED);
          o->setSpinnerVisible(true);
          m_posterPagesWidthInput->end();
        } // Fl_PosteRazor_Spinner* m_posterPagesWidthInput
        { m_posterPagesWidthLabel = new Fl_Box(520, 195, 70, 25, "pages");
          m_posterPagesWidthLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_posterPagesWidthLabel
        { Fl_PosteRazor_Spinner* o = m_posterPagesHeightInput = new Fl_PosteRazor_Spinner(430, 225, 90, 25, "Height:");
          m_posterPagesHeightInput->box(FL_NO_BOX);
          m_posterPagesHeightInput->color(FL_BACKGROUND_COLOR);
          m_posterPagesHeightInput->selection_color(FL_BACKGROUND_COLOR);
          m_posterPagesHeightInput->labeltype(FL_NORMAL_LABEL);
          m_posterPagesHeightInput->labelfont(0);
          m_posterPagesHeightInput->labelsize(14);
          m_posterPagesHeightInput->labelcolor(FL_FOREGROUND_COLOR);
          m_posterPagesHeightInput->callback((Fl_Callback*)cb_m_posterPagesHeightInput);
          m_posterPagesHeightInput->align(FL_ALIGN_LEFT);
          m_posterPagesHeightInput->when(FL_WHEN_CHANGED);
          o->setSpinnerVisible(true);
          m_posterPagesHeightInput->end();
        } // Fl_PosteRazor_Spinner* m_posterPagesHeightInput
        { m_posterPagesHeightLabel = new Fl_Box(520, 225, 70, 25, "pages");
          m_posterPagesHeightLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_posterPagesHeightLabel
        m_posterSizeInPagesGroup->end();
      } // Fl_Group* m_posterSizeInPagesGroup
      { m_posterSizePercentualRadioButton = new Fl_Round_Button(335, 260, 260, 20, "Image size in percent");
        m_posterSizePercentualRadioButton->type(102);
        m_posterSizePercentualRadioButton->down_box(FL_ROUND_DOWN_BOX);
        m_posterSizePercentualRadioButton->callback((Fl_Callback*)cb_m_posterSizePercentualRadioButton);
      } // Fl_Round_Button* m_posterSizePercentualRadioButton
      { m_posterSizePercentualGroup = new Fl_Group(335, 285, 260, 25);
        { m_posterPercentualSizeInput = new Fl_PosteRazor_Spinner(430, 285, 90, 25, "Size:");
          m_posterPercentualSizeInput->box(FL_NO_BOX);
          m_posterPercentualSizeInput->color(FL_BACKGROUND_COLOR);
          m_posterPercentualSizeInput->selection_color(FL_BACKGROUND_COLOR);
          m_posterPercentualSizeInput->labeltype(FL_NORMAL_LABEL);
          m_posterPercentualSizeInput->labelfont(0);
          m_posterPercentualSizeInput->labelsize(14);
          m_posterPercentualSizeInput->labelcolor(FL_FOREGROUND_COLOR);
          m_posterPercentualSizeInput->callback((Fl_Callback*)cb_m_posterPercentualSizeInput);
          m_posterPercentualSizeInput->align(FL_ALIGN_LEFT);
          m_posterPercentualSizeInput->when(FL_WHEN_CHANGED);
          m_posterPercentualSizeInput->end();
        } // Fl_PosteRazor_Spinner* m_posterPercentualSizeInput
        { m_posterPercentualWidthLabel = new Fl_Box(520, 285, 70, 25, "%");
          m_posterPercentualWidthLabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        } // Fl_Box* m_posterPercentualWidthLabel
        m_posterSizePercentualGroup->end();
      } // Fl_Group* m_posterSizePercentualGroup
      m_posterSizeGroup->end();
    } // Fl_Group* m_posterSizeGroup
    { m_imageAlignmentGroup = new Fl_Group(325, 345, 275, 51, "Image alignment");
      m_imageAlignmentGroup->box(FL_THIN_DOWN_BOX);
      m_imageAlignmentGroup->color(FL_DARK2);
      m_imageAlignmentGroup->selection_color(FL_DARK2);
      { Fl_Group* o = new Fl_Group(335, 355, 113, 31);
        { m_posterAlignmentTopButton = new Fl_Button(335, 355, 31, 31);
          m_posterAlignmentTopButton->type(102);
          m_posterAlignmentTopButton->color(FL_DARK1);
          m_posterAlignmentTopButton->selection_color((Fl_Color)55);
          m_posterAlignmentTopButton->image(image_alignmentTop);
          m_posterAlignmentTopButton->callback((Fl_Callback*)cb_m_posterAlignmentTopButton);
        } // Fl_Button* m_posterAlignmentTopButton
        { m_posterAlignmentMiddleButton = new Fl_Button(376, 355, 31, 31);
          m_posterAlignmentMiddleButton->type(102);
          m_posterAlignmentMiddleButton->color(FL_DARK1);
          m_posterAlignmentMiddleButton->selection_color((Fl_Color)55);
          m_posterAlignmentMiddleButton->image(image_alignmentMiddle);
          m_posterAlignmentMiddleButton->callback((Fl_Callback*)cb_m_posterAlignmentMiddleButton);
        } // Fl_Button* m_posterAlignmentMiddleButton
        { m_posterAlignmentBottomButton = new Fl_Button(417, 355, 31, 31);
          m_posterAlignmentBottomButton->type(102);
          m_posterAlignmentBottomButton->color(FL_DARK1);
          m_posterAlignmentBottomButton->selection_color((Fl_Color)55);
          m_posterAlignmentBottomButton->image(image_alignmentBottom);
          m_posterAlignmentBottomButton->callback((Fl_Callback*)cb_m_posterAlignmentBottomButton);
        } // Fl_Button* m_posterAlignmentBottomButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(477, 355, 113, 31);
        { m_posterAlignmentLeftButton = new Fl_Button(477, 355, 31, 31);
          m_posterAlignmentLeftButton->type(102);
          m_posterAlignmentLeftButton->color(FL_DARK1);
          m_posterAlignmentLeftButton->selection_color((Fl_Color)55);
          m_posterAlignmentLeftButton->image(image_alignmentLeft);
          m_posterAlignmentLeftButton->callback((Fl_Callback*)cb_m_posterAlignmentLeftButton);
        } // Fl_Button* m_posterAlignmentLeftButton
        { m_posterAlignmentCenterButton = new Fl_Button(518, 355, 31, 31);
          m_posterAlignmentCenterButton->type(102);
          m_posterAlignmentCenterButton->color(FL_DARK1);
          m_posterAlignmentCenterButton->selection_color((Fl_Color)55);
          m_posterAlignmentCenterButton->image(image_alignmentCenter);
          m_posterAlignmentCenterButton->callback((Fl_Callback*)cb_m_posterAlignmentCenterButton);
        } // Fl_Button* m_posterAlignmentCenterButton
        { m_posterAlignmentRightButton = new Fl_Button(559, 355, 31, 31);
          m_posterAlignmentRightButton->type(102);
          m_posterAlignmentRightButton->color(FL_DARK1);
          m_posterAlignmentRightButton->selection_color((Fl_Color)55);
          m_posterAlignmentRightButton->image(image_alignmentRight);
          m_posterAlignmentRightButton->callback((Fl_Callback*)cb_m_posterAlignmentRightButton);
        } // Fl_Button* m_posterAlignmentRightButton
        o->end();
      } // Fl_Group* o
      m_imageAlignmentGroup->end();
    } // Fl_Group* m_imageAlignmentGroup
    { Fl_Box* o = new Fl_Box(315, 410, 295, 0);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    m_posterSizeStep->end();
  } // Fl_Group* m_posterSizeStep
  { m_savePosterStep = new Fl_Group(315, 45, 295, 365);
    m_savePosterStep->hide();
    { m_savePosterGroup = new Fl_Group(325, 70, 275, 85, "Save the Poster");
      m_savePosterGroup->box(FL_THIN_DOWN_BOX);
      m_savePosterGroup->color(FL_DARK2);
      { Fl_Button* o = new Fl_Button(335, 80, 255, 25, "@+14filesave");
        o->labelcolor((Fl_Color)42);
        o->callback((Fl_Callback*)cb_14filesave);
      } // Fl_Button* o
      { m_setLaunchPDFApplicationCheckButton = new Fl_Check_Button(335, 115, 255, 30, "Launch PDF application after saving");
        m_setLaunchPDFApplicationCheckButton->down_box(FL_DOWN_BOX);
        m_setLaunchPDFApplicationCheckButton->callback((Fl_Callback*)cb_m_setLaunchPDFApplicationCheckButton);
        m_setLaunchPDFApplicationCheckButton->align(132|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* m_setLaunchPDFApplicationCheckButton
      m_savePosterGroup->end();
    } // Fl_Group* m_savePosterGroup
    { Fl_Box* o = new Fl_Box(315, 410, 295, 0);
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    m_savePosterStep->end();
  } // Fl_Group* m_savePosterStep
  m_wizard->end();
} // Fl_Wizard* m_wizard
{ m_paintCanvasGroup = new Fl_Paint_Canvas_Group(10, 45, 300, 365);
  m_paintCanvasGroup->box(FL_FLAT_BOX);
  m_paintCanvasGroup->color(FL_DARK2);
  m_paintCanvasGroup->selection_color(FL_BACKGROUND_COLOR);
  m_paintCanvasGroup->labeltype(FL_NORMAL_LABEL);
  m_paintCanvasGroup->labelfont(0);
  m_paintCanvasGroup->labelsize(14);
  m_paintCanvasGroup->labelcolor((Fl_Color)30);
  m_paintCanvasGroup->align(FL_ALIGN_TOP);
  m_paintCanvasGroup->when(FL_WHEN_RELEASE);
  m_paintCanvasGroup->end();
  Fl_Group::current()->resizable(m_paintCanvasGroup);
} // Fl_Paint_Canvas_Group* m_paintCanvasGroup
{ Fl_Group* o = new Fl_Group(10, 10, 600, 25);
  { m_stepInfoBox = new Fl_Box(10, 10, 570, 25, "Step 1 of 8: Load an image");
    m_stepInfoBox->box(FL_THIN_UP_BOX);
    m_stepInfoBox->color((Fl_Color)10);
    m_stepInfoBox->labelfont(1);
    m_stepInfoBox->labelsize(15);
    m_stepInfoBox->labelcolor(FL_GRAY0);
    m_stepInfoBox->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    Fl_Group::current()->resizable(m_stepInfoBox);
  } // Fl_Box* m_stepInfoBox
  { Fl_Button* o = new Fl_Button(585, 10, 25, 25, "?");
    o->color((Fl_Color)10);
    o->labelfont(1);
    o->labelsize(15);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_);
  } // Fl_Button* o
  o->end();
} // Fl_Group* o
// ****** Load input image step:
// ****** Paper size step:
// ****** Overlapping step:
// ****** Poster size step:
// ****** Save poster step:
size_range(this->w(), this->h());
end();
}

void PosteRazorHelpDialogUI::cb_OK_i(Fl_Return_Button*, void*) {
  hide();
}
void PosteRazorHelpDialogUI::cb_OK(Fl_Return_Button* o, void* v) {
  ((PosteRazorHelpDialogUI*)(o->parent()->parent()))->cb_OK_i(o,v);
}

void PosteRazorHelpDialogUI::cb_m_homepageButton_i(Fl_Button*, void*) {
  HandleHomepageButtonClick();
}
void PosteRazorHelpDialogUI::cb_m_homepageButton(Fl_Button* o, void* v) {
  ((PosteRazorHelpDialogUI*)(o->parent()->parent()))->cb_m_homepageButton_i(o,v);
}
PosteRazorHelpDialogUI::PosteRazorHelpDialogUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _PosteRazorHelpDialogUI();
}

PosteRazorHelpDialogUI::PosteRazorHelpDialogUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _PosteRazorHelpDialogUI();
}

void PosteRazorHelpDialogUI::_PosteRazorHelpDialogUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->user_data((void*)(this));
this->align(FL_ALIGN_TOP);
this->when(FL_WHEN_RELEASE);
{ Fl_Help_View* o = m_help_view = new Fl_Help_View(10, 10, 480, 345);
  m_help_view->labelsize(8);
  Fl_Group::current()->resizable(m_help_view);
  o->textsize(14);
  o->textfont(FL_HELVETICA);
} // Fl_Help_View* m_help_view
{ Fl_Group* o = new Fl_Group(10, 365, 480, 25);
  { Fl_Return_Button* o = new Fl_Return_Button(405, 365, 85, 25, "OK");
    o->callback((Fl_Callback*)cb_OK);
  } // Fl_Return_Button* o
  { m_homepageButton = new Fl_Button(10, 365, 185, 25, "Homepage");
    m_homepageButton->callback((Fl_Callback*)cb_m_homepageButton);
  } // Fl_Button* m_homepageButton
  { Fl_Box* o = new Fl_Box(333, 365, 10, 25);
    o->labelsize(8);
    Fl_Group::current()->resizable(o);
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
size_range(300, 150);
end();
}

void PosteRazorHelpDialogUI::SetHomepageButtonLabel(const char *label) {
  m_homepageButton->label(label);
}

void PosteRazorSettingsDialogUI::cb_m_useOpenGLCheckButton_i(Fl_Check_Button*, void*) {
  HandleUseOpenGLChangement();
}
void PosteRazorSettingsDialogUI::cb_m_useOpenGLCheckButton(Fl_Check_Button* o, void* v) {
  ((PosteRazorSettingsDialogUI*)(o->parent()->parent()->parent()))->cb_m_useOpenGLCheckButton_i(o,v);
}

void PosteRazorSettingsDialogUI::cb_m_okButton_i(Fl_Return_Button*, void*) {
  m_okWasPressed = true;
hide();
}
void PosteRazorSettingsDialogUI::cb_m_okButton(Fl_Return_Button* o, void* v) {
  ((PosteRazorSettingsDialogUI*)(o->parent()->parent()))->cb_m_okButton_i(o,v);
}

void PosteRazorSettingsDialogUI::cb_m_cancelButton_i(Fl_Button*, void*) {
  hide();
}
void PosteRazorSettingsDialogUI::cb_m_cancelButton(Fl_Button* o, void* v) {
  ((PosteRazorSettingsDialogUI*)(o->parent()->parent()))->cb_m_cancelButton_i(o,v);
}
PosteRazorSettingsDialogUI::PosteRazorSettingsDialogUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _PosteRazorSettingsDialogUI();
}

PosteRazorSettingsDialogUI::PosteRazorSettingsDialogUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _PosteRazorSettingsDialogUI();
}

void PosteRazorSettingsDialogUI::_PosteRazorSettingsDialogUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->user_data((void*)(this));
this->align(FL_ALIGN_TOP);
this->when(FL_WHEN_RELEASE);
{ m_backgroudGroup = new Fl_Group(10, 10, 295, 345);
  m_backgroudGroup->box(FL_THIN_DOWN_BOX);
  m_backgroudGroup->labelsize(8);
  { m_unitOfLengthGroup = new Fl_Group(20, 35, 275, 85, "Units");
    m_unitOfLengthGroup->box(FL_THIN_DOWN_BOX);
    m_unitOfLengthGroup->color(FL_DARK2);
    { m_unitOfLengthButtonsGroup = new Fl_Group(30, 45, 255, 25);
      m_unitOfLengthButtonsGroup->end();
    } // Fl_Group* m_unitOfLengthButtonsGroup
    { m_unitOfLengthExplanationBox = new Fl_Box(30, 80, 255, 30, "Choose the distance unit you want to work with");
      m_unitOfLengthExplanationBox->align(134|FL_ALIGN_INSIDE);
    } // Fl_Box* m_unitOfLengthExplanationBox
    m_unitOfLengthGroup->end();
  } // Fl_Group* m_unitOfLengthGroup
  { m_useOpenGLGroup = new Fl_Group(20, 145, 275, 105, "Preview with OpenGL");
    m_useOpenGLGroup->box(FL_THIN_DOWN_BOX);
    m_useOpenGLGroup->color(FL_DARK2);
    { m_useOpenGLCheckButton = new Fl_Check_Button(30, 154, 255, 20, "use OpenGL");
      m_useOpenGLCheckButton->down_box(FL_DOWN_BOX);
      m_useOpenGLCheckButton->callback((Fl_Callback*)cb_m_useOpenGLCheckButton);
    } // Fl_Check_Button* m_useOpenGLCheckButton
    { m_useOpenGLExplanationBox = new Fl_Box(30, 179, 255, 60, "OpenGL enables a smooth preview on modern systems. It could slow the preview \
down on old systems, though.");
      m_useOpenGLExplanationBox->align(134|FL_ALIGN_INSIDE);
    } // Fl_Box* m_useOpenGLExplanationBox
    m_useOpenGLGroup->end();
  } // Fl_Group* m_useOpenGLGroup
  { m_languageGroup = new Fl_Group(20, 275, 275, 70, "Language");
    m_languageGroup->box(FL_THIN_DOWN_BOX);
    m_languageGroup->color(FL_DARK2);
    { m_languageButtonsGroup = new Fl_Group(30, 285, 255, 25);
      m_languageButtonsGroup->end();
    } // Fl_Group* m_languageButtonsGroup
    { m_languageExplanationBox = new Fl_Box(30, 315, 255, 20, "Choose your language");
      m_languageExplanationBox->align(134|FL_ALIGN_INSIDE);
    } // Fl_Box* m_languageExplanationBox
    m_languageGroup->end();
  } // Fl_Group* m_languageGroup
  m_backgroudGroup->end();
} // Fl_Group* m_backgroudGroup
{ m_confirmButtonsGroup = new Fl_Group(10, 365, 296, 25);
  { m_okButton = new Fl_Return_Button(210, 365, 95, 25, "OK");
    m_okButton->callback((Fl_Callback*)cb_m_okButton);
  } // Fl_Return_Button* m_okButton
  { m_cancelButton = new Fl_Button(105, 365, 95, 25, "Cancel");
    m_cancelButton->callback((Fl_Callback*)cb_m_cancelButton);
  } // Fl_Button* m_cancelButton
  { Fl_Box* o = new Fl_Box(10, 365, 10, 25);
    o->labelsize(8);
    Fl_Group::current()->resizable(o);
  } // Fl_Box* o
  m_confirmButtonsGroup->end();
} // Fl_Group* m_confirmButtonsGroup
m_okWasPressed = false;
set_modal();
end();
}

bool PosteRazorSettingsDialogUI::show_modal(void) {
  m_okWasPressed = true;
show();
while(visible())
	Fl::wait();
return m_okWasPressed;
}
